[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Reproducible Medical Research With R",
    "section": "",
    "text": "Preface\nThis is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books\nThis is a static code chunk, which runs the R code in the code chunk below, and lists the output after the code chunk.\n1 + 1\n\n[1] 2\nA Quarto live extension has been installed in this project. In this case, we are using coatless/webr, as it works for books, while rwasm/live does not yet work for books.\nThe documentation for Quarto Live can be read here.\nNote that to make live webr code chunks work with packages beyond base R, each chapter qmd document needs to have a yaml header that looks something like:\n---\nformat: live-html\nwebr:\n  engine: knitr\n  packages:\n    - tidyverse\n    - gt\n    - medicaldata\n---\nIn order to install the particular packages needed for that chapter for the use of the live code chunks.\nNote that this is separate from the setup code chunk, which loads packages for the static code chunks and for inline R code.\nThis will allow you to create live code chunks that you can edit and run, like the one below. Note that when you load a webpage with a live code chunk that loads packages, a black dot will flash at the top right of each code chunk (just to the left of the Run Code button) until all of the packages are loaded. Only then will you be able to run the live webr code chunks.\nAlso note that each live webr code chunk will start with {webr-r} rather than {r} for static code chunks.\nThe below is a live, or dynamic code chunk.\nCheck out the live webr code chunk in the next chapter (which does use packages beyond base R).",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#acknowledgements",
    "href": "index.html#acknowledgements",
    "title": "Reproducible Medical Research With R",
    "section": "Acknowledgements",
    "text": "Acknowledgements\nMany of the following chapters were inspired by blogposts, websites, and e-books that go into far greater depth on topics like modeling, mapping health data, data wrangling, etc. The end of many chapters includes a section on where to explore further. For many of these areas, this book is only an introduction.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#inspirations",
    "href": "index.html#inspirations",
    "title": "Reproducible Medical Research With R",
    "section": "Inspirations",
    "text": "Inspirations\nThe HealthyR book has been an inspiration, and the work of Ewen Harrison and Riinu Pius has been inspirational.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#thanks",
    "href": "index.html#thanks",
    "title": "Reproducible Medical Research With R",
    "section": "Thanks",
    "text": "Thanks",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "This quarto book, with the help of wasm and webr, allows you to edit and run code within live code chunks (a capability called quarto-live).\nNow it is your turn to write some code.\nAdd some style and formatting to the gt table below. Replace the fairly generic opt_stylize function with your own style (though the six options for opt_stylize can get you started quickly). Look at some options either here, or in the {gt} pakage webpage here. Experiment with the fmt_ and the cols_ families of functions. Note that you can change opt_stylize to styles 1-6, and the default colors include “blue”, “cyan”, “pink”, “green”, “red”, or “gray”\n\n\n\n\n\n\nConsider renaming the columns, by adding code that looks a bit like this (pick your own favorite column names):\n\n|&gt; \ncols_label(treatment = \"Rx\",\n          dosing_regimen_for_scurvy = \"Dose\",\n           gum_rot_d6 = \"Gum Rot\",\n           skin_sores_d6 = \"Skin Sores\",\n           weakness_of_the_knees_d6 = \"Weakness\",\n           lassitude_d6 = \"Lassitude\",\n           fit_for_duty_d6 = \"Fit\")",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "wrangle.html",
    "href": "wrangle.html",
    "title": "2  Wrangling data",
    "section": "",
    "text": "Filter the starwars dataset so that only the characters of the Droid species are included. You should get a six row list from C3PO to BB8. You may want to make the table prettier by piping it into gt() to make a gt table.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\nConsider using the filter() function from dplyr. Note that the species ‘Droid’ is capitalized.\n\n\n\n\n\n\n\n\n\n\n\nHint 2\n\n\n\n\n\nYou should filter the dataset using the species column. Remember to use “==” to test equality.\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\nUse the filter() function from dplyr:\n1starwars |&gt;\n2    filter(species == \"Droid\") |&gt;\n3    gt()\n\n1\n\nTake the starwars dataset, and then,\n\n2\n\nFilter for the “Droid” species, and then\n\n3\n\nPipe into gt() for a cleaner, scrollable table",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Wrangling data</span>"
    ]
  },
  {
    "objectID": "inset_table.html",
    "href": "inset_table.html",
    "title": "3  The Power of Patchwork",
    "section": "",
    "text": "We will combine a table and a plot into a single graphic, using the {patchwork} package. Let’s start by loading in some data from {medicaldata}\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(medicaldata)\nlibrary(gt)\n\nWe will now create a summary table in gt that compares radiographic outcomes by arm from 1 = Death to 6 = Considerable improvement. 3 = Moderate deterioration and 4 = No change\nThis HTML table would show up in RStudio in the Viewer tab.\n\nd &lt;- medicaldata::strep_tb \nd |&gt; select(arm, rad_num) |&gt; \n  group_by(arm) |&gt; \n  summarize(rad6m = mean(rad_num),\n            sd = sd(rad_num)) |&gt; \n  gt::gt() -&gt;t1\nt1\n\n\n\n\n\n\n\narm\nrad6m\nsd\n\n\n\n\nControl\n3.134615\n1.726709\n\n\nStreptomycin\n4.672727\n1.732634\n\n\n\n\n\n\n\nNow let’s convert this table into a gtable object composed of 11 grobs (graphical objects), which you can see in the Console. Notice that you now have to plot it to make it show up, amd in RStudio it would show up (by default) centered in the Plots tab.\n\nlibrary(gtable)\ngt1 &lt;- t1 |&gt; as_gtable()\ngt1\n\nTableGrob (3 x 5) \"layout\": 11 grobs\n    z     cells           name\n1   1 (1-1,2-2) column_label_1\n2   2 (1-1,3-3) column_label_2\n3   3 (1-1,4-4) column_label_3\n4   4 (2-2,2-2)    body_cell_1\n5   5 (2-2,3-3)    body_cell_2\n6   6 (2-2,4-4)    body_cell_3\n7   7 (3-3,2-2)    body_cell_4\n8   8 (3-3,3-3)    body_cell_5\n9   9 (3-3,4-4)    body_cell_6\n10 10 (2-3,2-4)     table_body\n11 11 (1-3,2-4)          table\n                                 grob\n1   gt_grid_cell[GRID.gt_grid_cell.3]\n2   gt_grid_cell[GRID.gt_grid_cell.6]\n3   gt_grid_cell[GRID.gt_grid_cell.9]\n4  gt_grid_cell[GRID.gt_grid_cell.13]\n5  gt_grid_cell[GRID.gt_grid_cell.17]\n6  gt_grid_cell[GRID.gt_grid_cell.21]\n7  gt_grid_cell[GRID.gt_grid_cell.25]\n8  gt_grid_cell[GRID.gt_grid_cell.29]\n9  gt_grid_cell[GRID.gt_grid_cell.33]\n10 gt_grid_cell[GRID.gt_grid_cell.36]\n11 gt_grid_cell[GRID.gt_grid_cell.39]\n\nplot(gt1)\n\n\n\n\n\n\n\n\nNow we will make our plot, which will show up in RStudio in the Plots tab. Run the code below to get the plot. We use expand_limits in ggplot to make extra room for the table. The Streptomycin column is 1, and the Control column is 2. We are expanding to add empty columns 3 and 4. Run the code with the blue Run Code button, then Turn off expand_limits with a hashtag to comment it out to see how this works, then Run the code again. Do you know what would happen if we used geom_point? Try it out in the code chunk below. Re-run the code. Click on the Start Over button to restore the code to its original state.\n\n\n\n\n\n\nNow insert the gt1 graphical object table into the plot with the {patchwork} function, inset_element, using the code below at line 25 and beyond. The first 23 lines rebuild the table and plot objects. Run the code. The standard ggplot has the point 0,0 at bottom left, and the point 1,1 at the top right. In the last part of the code chunk below, experiment with the location of the plot by changing the TRBL (pronounced ‘trouble’) parameters, then rerun the code. Also experiment with the alignment - options include ‘full’ and ‘plot’, and run the code, to see if you can figure out what the table is being aligned with for each option.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>The Power of Patchwork</span>"
    ]
  },
  {
    "objectID": "functions.html",
    "href": "functions.html",
    "title": "4  Functions",
    "section": "",
    "text": "4.1 Functions\nR is a functional programming language. This means that functions are first-class objects in R, like dataframes or vectors. Functions can be assigned to variables, passed as arguments to other functions, and returned as values from other functions.\nA common acronym used in R programming is “DRY” for don’t repeat yourself. If you find yourself using the same chunk of code repeatedly (cut, paste, edit), it is probably worth rewriting the code as a function.\nYou can build your own functions in R using the function keyword. Here’s a simple example that adds 2 to an input number:\nNote that we added a print statement so that you know when the function is installed in the Environment.\nTo use this, you can call the function with an argument:\nExperiment a bit with the code block above, and change the argument number to something different, then run it to get the result. It adapts to a new input, and runs the same function.\nYou can even go back to the function block above, and change the what the function does to add three or subtract two. Be sure to run it again to save the new function before you run the function call in the lower block.\nA function has 3 (sort of 4) parts:\nFor the function below, think about:\nname: square  formal argument: x  body: x ^2\nRun the code chunk above to create the square function in the Global Environment.\nNow try to call the square function in a new code block. Fill in an appropriate argument, then run it.\nSome functions generate intermediate results and final results, or may generate more than one piece of output. If this is the case, you may need more control of what is returned by the function. You can do this by combining the components into a vector, a dataframe, or a list, and then return(x) at the end of the body of your function, so that it does not just return the last result. Some people prefer to specify what is returned at the end of the body of each function, just to make it clear. Let’s look at an example.\nRun the function above until the black dot stops blinking. Then it should be an object in the Environment. At this point you should be able to call the function in the code chunk below.\nExperiment with changing the extremes of the vector, and then calling the function again. Test that it works properly.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Functions</span>"
    ]
  },
  {
    "objectID": "functions.html#functions",
    "href": "functions.html#functions",
    "title": "4  Functions",
    "section": "",
    "text": "The name of the function (in this case, add_two)\nThe formals(), the list of arguments that control how you call the function. In the case of our simple function below, this is just x.\nThe body(), all of the the code inside the function.\nThe environment(), the data structure that determines how the function finds the values associated with the names. The environment is defined implicitly, rather than explicitly. The function will always look for values of the arguments (the formals) in the function call, or within the function itself. Only if it can not find these defined within the function call or the function, will it them search one level up (in the Global Environment) to see if you have a value for one of the arguments (like x).\n\n\n\nwhat is the name\nwhat is/are the formal arguments?\nwhat is the body?",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Functions</span>"
    ]
  },
  {
    "objectID": "longitudinal.html",
    "href": "longitudinal.html",
    "title": "5  Longitudinal Data",
    "section": "",
    "text": "5.1 Longitudinal Data\nHealth care data, especially in administrative databases, are often longitudinal. This means that each patient has multiple encounters, each corresponding to a different time point. For example, a patient may have a encounter for each visit, each procedure, and multiple telephone and portal encounters. We often want to collect data from these encounters and summarize them in a way that is useful for analysis. For example, we may want to know how a patient responded after a change in therapy. If we can identify an index date when the change in therapy occurred, we can then collect data on measured outcomes at subsequent encounters. For this example, we will focus on blood pressure data, after an imaginary intervention with a new antihypertensive therapy.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Longitudinal Data</span>"
    ]
  },
  {
    "objectID": "longitudinal.html#data",
    "href": "longitudinal.html#data",
    "title": "5  Longitudinal Data",
    "section": "5.2 Data",
    "text": "5.2 Data\nHere is a look at the data. Each patient will start a new antihypertensive on January 1, 2020, and we will follow them over several months. Look at the data below. Each row represents a patient encounter, with the patient ID, the date of the encounter, and the systolic and diastolic blood pressure measurements.\n\noptions(tidyverse.quiet = TRUE)\nlibrary(tidyverse)\n\nbp_data &lt;- tibble::tribble(\n  ~pt_id, ~visit_date, ~sbp, ~dbp,\n  1, \"2020-01-01\", 145, 95,\n  1, \"2020-04-02\", 132, 88,\n  1, \"2020-07-03\", 116, 80,\n  2, \"2020-01-01\", 160, 105,\n  2, \"2020-04-02\", 152, 99,\n  2, \"2020-07-03\", 140, 85,\n  3, \"2020-01-01\", 162, 93,\n  3, \"2020-04-02\", 153, 88,\n  3, \"2020-07-03\", 139, 82,\n  4, \"2020-01-01\", 150, 95,\n  4, \"2020-04-02\", 143, 88,\n  4, \"2020-07-03\", 133, 83,\n  5, \"2020-01-01\", 160, 100,\n  5, \"2020-04-02\", 155, 95,\n  5, \"2020-07-03\", 148, 78\n)\n\nhead(bp_data)\n\n# A tibble: 6 × 4\n  pt_id visit_date   sbp   dbp\n  &lt;dbl&gt; &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt;\n1     1 2020-01-01   145    95\n2     1 2020-04-02   132    88\n3     1 2020-07-03   116    80\n4     2 2020-01-01   160   105\n5     2 2020-04-02   152    99\n6     2 2020-07-03   140    85\n\n\nIf we sorted these data by date alone, it would not make a lot of sense, as each patient has their own blood pressure journey. Instead, we want to group the data by patient, and calculate change over time. This requires making comparisons between rows (encounters) to see change over time.\n\n\n\n\n\n\n\n\nThis gives us change data for sbp and dbp, which is great. The lag(sbp) function uses the sbp value from one row above. If we wanted to compare sbp value in the current encounter to the value from 2 encounters ago, we could use lag(sbp, 2). Give this a try in the code chunk above. Run it to see the output (lots of NAs and a few values). If you want to compare the value in each encounter to the initial value for that patient, you group by patient first, then calculate the change as sbp_change_from1 = sbp - first(sbp). You can use first() and last() after grouping to identify the first and last encounter values for a particular variable. Try comparing the current value for dbp to the first or the last value in the code chunk above. Note that if you want to compare values to the next encounter, you would use the lead() function. Try this out in the code chunk below. Fill in the blank for the value that you want to compare.\n\n\n\n\n\n\n\n\nNote that the last encounter has NAs for change, as there is no lead (next) value for that patient. This is problematic if we want to plot the values (change in BP) over time.\nWe can fix this by piping the result into replace_na(list(sbp_change = 0, dbp_change = 0)). Give this a try in the code chunk above.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Longitudinal Data</span>"
    ]
  },
  {
    "objectID": "longitudinal.html#numbering-encounters",
    "href": "longitudinal.html#numbering-encounters",
    "title": "5  Longitudinal Data",
    "section": "5.3 Numbering Encounters",
    "text": "5.3 Numbering Encounters\nIt can often be very handy to number the encounters for each patient so that you have a useful counter to track over time in longitudinal comparisons. You can create this by grouping and adding row_numbers.\nYou can also keep track of the number of days since the index date with another variable, by subtracting the dates and converting this result to a numeric value.\n\n\n\n\n\n\n\n\nNote that the following functions can identify the intended row when you have grouped and arranged encounters in chronological order.\n\nfirst() [the first row]\nlag() [the previous row]\nlead() [the next row]\nlast() [the last row]",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Longitudinal Data</span>"
    ]
  },
  {
    "objectID": "longitudinal.html#now-to-plot",
    "href": "longitudinal.html#now-to-plot",
    "title": "5  Longitudinal Data",
    "section": "5.4 Now to Plot",
    "text": "5.4 Now to Plot\nWe can now take our change data and plot it with a line plot. Remember to use color or group within aes() so that you do not get line plot chaos.\n\n\n\n\n\n\n\n\nThis plot suggests a relatively steep improvement in SBP between visits 1 and 2, and slower improvement between visits 2 and 3.\nJust to see the outcome (what you will see if you forget to do this), remove the color = factor(pt_id) from ggplot, add on a libe of code for geom_point(),and run this code chunk again. When you see a plot like this result, it is because you forgot to group or color by patient. This is a very common mistake.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Longitudinal Data</span>"
    ]
  },
  {
    "objectID": "longitudinal.html#challenges-for-you",
    "href": "longitudinal.html#challenges-for-you",
    "title": "5  Longitudinal Data",
    "section": "5.5 Challenges for You",
    "text": "5.5 Challenges for You\nImprove the first draft of the plot from the code chunk above. Google to find out how to do each of these in ggplot, then implement these in the code chunk above.\n\nPut a proper title on this plot\nmake the y and x axis titles nicer with labs()\nChange the name of the legend to “Patient”\nRemove the 1.5 and 2.5 from the x axis\nUse a nicer theme than the default",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Longitudinal Data</span>"
    ]
  },
  {
    "objectID": "spaghetti.html",
    "href": "spaghetti.html",
    "title": "6  Spaghetti Plots for Longitudinal Data",
    "section": "",
    "text": "6.1 Longitudinal Data\nHealth care data, especially in administrative databases, are often longitudinal. This means that each patient has multiple encounters, each corresponding to a different time point. For example, a patient may have a encounter for each visit, each procedure, and multiple telephone and portal encounters. We often want to collect data from these encounters and summarize them in a way that is useful for analysis. We often want to track each patient over time, to see the natural history, or a response to a change in therapy.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Spaghetti Plots for Longitudinal Data</span>"
    ]
  },
  {
    "objectID": "spaghetti.html#the-spaghetti-plot",
    "href": "spaghetti.html#the-spaghetti-plot",
    "title": "6  Spaghetti Plots for Longitudinal Data",
    "section": "6.2 The Spaghetti Plot",
    "text": "6.2 The Spaghetti Plot\nThe Spaghetti Plot is a visualization that shows change over multiple time points for longitudinal data, which lets you see change in each individual as a line. It gets the name because the result (with method = “lm”) looks a bit like you scattered uncooked spaghetti (straight lines) on the plot. It’s a great way to show changes in data over multiple time points, and there are multiple variants, including summary smoothed lines.\nNote that a bit of data wrangling needs to be done to produce the correct data format for geom_line(). You may need to pivot_longer() to get 1 row of data for each data point, and an id for each individual (multiple points making up a line. This id will often be a patient id (pat_id). We will read in some simulated data below for 4 time points. The variables are time point, the value, ses (2 categories), elderly (2 categories), and pat_id for 8 patients.\nThe code below will illustrate the basic spaghetti plot.\n\noptions(tidyverse.quiet = TRUE)\nlibrary(tidyverse)\n\ndat &lt;- tibble::tribble(~time, ~value, ~ses, ~elderly, ~pat_id, 0, 0, 1, 1, 1, 1, 3, 1, 1, 1, 2, 5, 1, 1, 1, 3, 8, 1, 1, 1, 0, 0, 2, 1, 2, 1, 4, 2, 1, 2, 2, 7, 2, 1, 2, 3, 9, 2, 1, 2, 0, 0, 1, 2, 3, 1, 5, 1, 2, 3, 2, 9, 1, 2, 3, 3, 11, 1, 2, 3, 0, 0, 2, 2, 4, 1, 5, 2, 2, 4, 2, 9, 2, 2, 4, 3, 15, 2, 2, 4, 0, 0, 1, 1, 5, 1, 5, 1, 1, 5, 2, 6, 1, 1, 5, 3, 9, 1, 1, 5, 0, 0, 2, 1, 6, 1, 5, 2, 1, 6, 2, 8, 2, 1, 6, 3, 13, 2, 1, 6, 0, 0, 1, 2, 7, 1, 4, 1, 2, 7, 2, 8, 1, 2, 7, 3, 14, 1, 2, 7, 0, 0, 2, 2, 8, 1, 6, 2, 2, 8, 2, 8, 2, 2, 8, 3, 16, 2, 2, 8)\n\n\nggplot(dat, aes(\n  x = time, y = value,\n  group = factor(pat_id)\n)) +\n  geom_smooth(\n    formula = y ~ x, se = FALSE,\n    method = \"lm\"\n  ) +\n  xlab(\"Observation Time Point\") +\n  ylab(\"Y\")\n\n\n\n\n\n\n\n\nAs you can see, this plot looks a bit like spilled (uncooked) spaghetti, with a line for each patient. Each patient is the same (default) color. Note that it is critical to group by the patient id (group = factor(pat_id)) so that ggplot knows which points go together as a line. If you remove this bit of code for the group argument, you get chaos from geom_smooth() or geom_line(). We can also let each patient’s line follow their actual values, rather than a fitted line, with a few modifications. Run the example below.\n\n\n\n\n\n\n\n\nNow each patient is represented by a line (and points) with more detail than a fitted straight line.\nWe can also chose to color these lines in two classes by ses (SocioEconomic Status) by setting color = factor(ses). We can make the legend neater by putting it inside the plot boundaries with theme (legend.position), and use the x and y range from 0 to 1 to position it. Google how to do these two things, and try to implement them in the code chunk above.\nYou can see the solution below if you get stuck.\n\nggplot(dat, aes(\n  x = time, y = value,\n  group = factor(pat_id), color = factor(ses)\n)) +\n  geom_point() +\n  geom_line() +\n  theme(legend.position = c(0.8, 0.2)) +\n  xlab(\"Observation Time Point\") +\n  ylab(\"Y\")\n\n\n\n\n\n\n\n\nIf we want to summarize the overall trend, we can use a geom_smooth() with the default loess smoothing. We set the color to “black”, rather than the color of either SES group. In order to get a single summary curve, we need to turn off the grouping with group = NULL. Note the loess smoothing produces a curve in the code below.\n\nggplot(dat, aes(\n  x = time, y = value,\n  group = factor(pat_id), color = factor(ses)\n)) +\n  geom_point() +\n  geom_line() +\n  theme(legend.position = c(0.8, 0.2)) +\n  xlab(\"Observation Time Point\") +\n  ylab(\"Y\") +\n  geom_smooth(formula = y ~ x, se = FALSE, linewidth = 2, method = \"loess\", color = \"black\", aes(group = NULL))\n\n\n\n\n\n\n\n\nNow a challenge for you - how would you make 2 distinct summary curves for the low and high SES groups, each in the appropriate color, but in linewidth = 4?\nTry to modify the code chunk below to achieve this.\n\n\n\n\n\n\n\n\nNow a challenge - facet this plot into one facet for the young, and one facet for the elderly.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Spaghetti Plots for Longitudinal Data</span>"
    ]
  },
  {
    "objectID": "spaghetti.html#more-challenges-for-you",
    "href": "spaghetti.html#more-challenges-for-you",
    "title": "6  Spaghetti Plots for Longitudinal Data",
    "section": "6.3 More Challenges for You",
    "text": "6.3 More Challenges for You\n\n\n\n\n\n\n\n\nImprove the first draft of the plot from the code chunk above. Google to find out how to do each of these in ggplot, then implement these in the code chunk above.\n\nSee the initial plot above for CRP with smooth lines for each patient, then try it for FCP.\nNow plot the CRP values, and change the grouping to patid without colors, and use geom_point() and geom_line() rather than geom_smooth to see the CRP trends in black.\nNow plot the CRP values, and add to the aes, color = factor(dz_type) OR color= factor(flare) to group = factor(patid)\nNow plot the FCP values, and add the geom_smooth with group = NULL and color = factor(flare). Also facet_grid by dz_type, and see if you can improve the default legend title and labels (might need to google these).",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Spaghetti Plots for Longitudinal Data</span>"
    ]
  },
  {
    "objectID": "swimmer.html",
    "href": "swimmer.html",
    "title": "7  Swimmer Plots for Longitudinal Data",
    "section": "",
    "text": "7.1 Longitudinal Data\nHealth care data, especially in administrative databases, are often longitudinal. This means that each patient has their own journey through time with multiple medical encounters, each corresponding to a different time point. We often want to collect data from these encounters and summarize them in a way that is useful for analysis. We often want to track each patient over time, to see the natural history, or a response to a change in therapy.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Swimmer Plots for Longitudinal Data</span>"
    ]
  },
  {
    "objectID": "swimmer.html#the-swimmer-plot",
    "href": "swimmer.html#the-swimmer-plot",
    "title": "7  Swimmer Plots for Longitudinal Data",
    "section": "7.2 The Swimmer Plot",
    "text": "7.2 The Swimmer Plot\nThe Swimmer Plot is a visualization that shows treatment timelines, with each patient in their own “lane”. It gets the name because it looks a bit like a pool at a swim meet, where you can see the progress of each patient over time. These can help visualize treatment or measurement patterns, clinical events, time-varying covariates, outcomes, and loss to follow-up in longitudinal data settings. These work well with a moderate number of patient courses (usually 10-50), and can be illuminating when new approaches to therapy are being tried in small numbers of patients, like a case series.\nNote that this is not done with a particular package, but with standard geom_line and geom_point, but with a lot of customization in ggplot worth learning about.\nThis section borrows heavily from a nice blog post from statistician Kat Hoffman here. Note that a bit of data wrangling needs to be done to produce the correct data format for swimmer plots. We will read in some simulated data of COVID patients from spring 2020 from Kat Hoffman. The original data includes one row per day for each patient, with dichotomous outcomes for the events we are interested in: intubation status, use of steroids, the first day of severe hypoxia status, and death.\n\noptions(tidyverse.quiet = TRUE)\n\nlibrary(tidyverse)\nlibrary(gt)\nlibrary(rmarkdown)\n\ndat_long &lt;- read_csv(\"https://raw.githubusercontent.com/kathoffman/steroids-trial-emulation/main/data/dat_trt_timeline.csv\", col_types = list(id = \"c\", steroids = \"c\", death = \"c\", severe = \"c\"))\ndat_long |&gt; head()\n\n# A tibble: 6 × 6\n  id      day intubation_status steroids death severe\n  &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;             &lt;chr&gt;    &lt;chr&gt; &lt;chr&gt; \n1 797       0 Not intubated     0        0     0     \n2 797       1 Not intubated     0        0     0     \n3 797       2 Not intubated     0        0     1     \n4 797       3 Not intubated     0        0     0     \n5 797       4 Not intubated     0        0     0     \n6 797       5 Not intubated     0        0     0     \n\n\nWe can use geom_line to plot the length of stay, with day on thex axis and lines colored by intubation status and grouped by patient id.\n\n\n\n\n\n\n\n\nWhile this is very simple, it gives you a quick look at how these 30 simulated patients did in the hospital.\nWe can add steroid use by day as colored points with geom_point(), by adding one line of code after geom_line(). Give this a try in the code chunk above.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Swimmer Plots for Longitudinal Data</span>"
    ]
  },
  {
    "objectID": "swimmer.html#wrangling",
    "href": "swimmer.html#wrangling",
    "title": "7  Swimmer Plots for Longitudinal Data",
    "section": "7.3 Wrangling",
    "text": "7.3 Wrangling\nThis gets a bit messy, as we have different colors of points (steroids on/steroids off) obscuring the colors of the lines indicating intubation. It is time for a bit of data wrangling.\nTo help clarify things in data wrangling step 1, let’s create new variables to specify on which day(s) steroids were used, the first day that severe hypoxia was present, and when death occurred. These variables will have lots of NA values when things did not occur - so that we won’t plot points when the events did not occur (NA days), and will have days for the values when the events occurred, which makes these easier to plot on the x axis. These NAs will be removed (and generate a lot of warnings) when plotting, so we will use an option to turn off messages and warnings in this section.\n\nknitr::opts_chunk$set(message = F, warning = F)\n\ndat_long &lt;- read_csv(\"https://raw.githubusercontent.com/kathoffman/steroids-trial-emulation/main/data/dat_trt_timeline.csv\", col_types = list(id = \"c\", steroids = \"c\", death = \"c\", severe = \"c\"))\n\ndat_swim &lt;-\n  dat_long |&gt;\n  mutate(\n    severe_this_day = case_when(severe == 1 ~ day),\n    steroids_this_day = case_when(steroids == 1 ~ day),\n    death_this_day = case_when(death == 1 ~ day)\n  )\n\nIn data wrangling step 2 below, it would also make it easier to read the plot if the patients were arranged by length of stay (max_day), so we will use fct_reorder() to make the patient ids (factors) ordered by length of stay.\n\ndat_swim &lt;-\n  dat_swim |&gt;\n  group_by(id) |&gt;\n  mutate(max_day = max(day)) |&gt;\n  ungroup() |&gt;\n  mutate(id = fct_reorder(factor(id), max_day))\n\nhead(dat_swim) |&gt; paged_table()\n\n\n  \n\n\n\nAfter this data wrangling, now we can plot the data again, arranged by LOS and with only the steroid used days as visible points.\n\ndat_swim |&gt;\n  ggplot() +\n  geom_line(aes(x = day, y = id, col = intubation_status, group = id)) +\n  geom_point(aes(\n    x = steroids_this_day, y = id,\n    col = \"Steroids\", shape = \"Steroids\"\n  )) +\n  theme_bw()\n\n\n\n\n\n\n\n\nThis is nicer to look at, though the legend is still a bit of a mess, and you can now clearly see that steroids were largely used for intubated patients at this point. It would look nicer if the lines were nearly as thick as the points, so that they are less obscured.\nLet’s fix this with a larger geom_line size (start around 2 and fine-tune), and format the steroid points with a shape for contrast (you can find shapes 0-25 here https://www.sthda.com/english/wiki/ggplot2-point-shapes). Shapes 15-25 can have a separate color and fill, while shapes 0-14 can only have a color. Try this out in the chunk below - fix the two blanks (at the bottom right - you may need to scroll to the right) in the code below before you run the code.\n\n\n\n\n\n\n\n\nNow we can add important clinical events - we can add severe hypoxia events and death events to the plot, with additional point geoms with distinct shapes for each of these.\n\n\n\n\n\n\n\n\nNow three challenges for you -\n\nFine tune the colors in the code chunk above - at the beginning of the code chunk, create a vector of colors named colors, and include in the vector a red color for “Severe hypoxia”, a navy color for “Intubated”, a light blue for “Not Intubated”, a yellow-gold color for “Steroids”, and black for “Death”. Then in your geom_line and geom_point assign col= to each of these (“Intubated”, “Death” where appropriate)\nChange the legend name to “Patient Status”, and add scale_color_manual = \"Patient Status\"\nAssign the plot to the letter p, so that we can add to it further. Also display p at the end of the code chunk.\n\nTry to modify the code chunk above to achieve this.\nIf you want to peek at a solution, see the code below\n\nlibrary(ggplot2)\n\n# define colors for all geometries with a color argument\ncols &lt;- c(\n  \"Severe hypoxia\" = \"#b24745\", # red\n  \"Intubated\" = \"#483d8b\", # navy\n  \"Not intubated\" = \"#74aaff\", # light blue\n  \"Steroids\" = \"#ffd966\", # gold\n  \"Death\" = \"#000000\"\n) # black\n\np &lt;- dat_swim |&gt;\n  ggplot() +\n  geom_line(aes(x = day, y = id, col = intubation_status, group = id),\n    size = 1.8\n  ) +\n  geom_point(aes(x = steroids_this_day, y = id, col = \"Steroids\"), stroke = 2, shape = 15) +\n  theme_bw() +\n  geom_point(aes(x = severe_this_day, y = id, col = \"Severe hypoxia\"), size = 2, stroke = 1.5, shape = 21) +\n  geom_point(aes(x = death_this_day, y = id, col = \"Death\"), size = 2, stroke = 1.5, shape = 4) +\n  scale_color_manual(values = cols, name = \"Patient Status\")\np\n\n\n\n\n\n\n\n\nThis is developing nicely. But the legend symbols are accurate for colors, but don’t reflect the shapes we used, as we did not use aes() to create the shapes. To override the default shapes, lines, etc. in the legend, we need to use the guides() function, and override guide_legend(). This lets you manually specify the shapes. Let’s start by first defining the corresponding shapes (with NA when we don’t want a point), then overriding the shapes, and update our plot.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Swimmer Plots for Longitudinal Data</span>"
    ]
  },
  {
    "objectID": "swimmer.html#aesthetic-tune-ups",
    "href": "swimmer.html#aesthetic-tune-ups",
    "title": "7  Swimmer Plots for Longitudinal Data",
    "section": "7.4 Aesthetic Tune-Ups",
    "text": "7.4 Aesthetic Tune-Ups\n\nshape_override &lt;- c(4, NA, NA, 21, 15) # order matches `cols`:severe, intubation (yes/no), steroids, death, with the appropriate shapes\n\n# modify the color legend to include the correct shapes\np +\n  guides(color = guide_legend(\n    override.aes = list(\n      shape = shape_override\n    )\n  ))\n\n\n\n\n\n\n\n\nThat worked well. Now let’s remove the lines though Death, Severe Hypoxia, and Steroids, by overriding the line type (1 for a standard line or NA for no line), then fine tune the stroke and size for each of these geom points. Note that for shapes 21-24 in R, you have to separately specify stroke (for outer line) and fill (if any), while shapes 1-20 just require a size.\n\nline_override &lt;- c(NA, 1, 1, NA, NA) # order matches `cols`:severe, intubation (yes/no), steroids, death\nstroke_override &lt;- c(1.2, 1, 1, 1, 1.4) # order matches `cols`:severe, intubation (yes/no), steroids, death\nsize_override &lt;- c(2.5, 2.5, 2.6, 2.5, 2) # order matches `cols`:severe, intubation (yes/no), steroids, death\n\np &lt;-\n  p +\n  guides(color = guide_legend(\n    override.aes = list(\n      shape = shape_override,\n      linetype = line_override,\n      stroke = stroke_override,\n      size = size_override\n    )\n  ))\np\n\n\n\n\n\n\n\n\nNow the legend looks nice. Let’s add a few more aesthetic tweaks, including title and better axis labels, and repositioning the legend.\n\np &lt;- p +\n  labs(x = \"Days since hospitalization\", y = \"Patient\\nnumber\", title = \"COVID Treatment Timeline for 30 Patients\") +\n  scale_x_continuous(expand = c(0, 0)) + # remove extra white space\n  theme( # text=element_text(family=\"Poppins\", size=11),\n    title = element_text(angle = 0, vjust = .5, size = 12, face = \"bold\"),\n    axis.title.y = element_text(angle = 0, vjust = .5, size = 12, face = \"bold\"),\n    axis.title.x = element_text(size = 15, face = \"bold\", vjust = -0.5, hjust = 0),\n    axis.text.y = element_text(size = 6, hjust = 1.5),\n    axis.ticks.y = element_blank(),\n    legend.position = c(0.8, 0.3),\n    legend.title = element_text(colour = \"black\", size = 13, face = 4),\n    legend.text = element_text(colour = \"black\", size = 10),\n    legend.background = element_rect(size = 0.5, linetype = \"solid\", colour = \"gray30\"),\n    panel.grid.minor = element_blank(),\n    panel.grid.major.x = element_blank()\n  )\np\n\n\n\n\n\n\n\n\nAnd we are done. Think about how you can illustrate the clinical course for a number of patients, and transmit a lot of longitudinal information quickly when the number of patients is not too great.\nTry this out with a small data set of your own. Select a few levels of status for line color, and a few events that are clinically significant. Spend some time planning this out and creating/wrangling the data set. It can be helpful to start with a rough mockup drawing on paper while you are planning to help you think out the statuses, events, shapes, and colors. It is important not to put in too much, or it can quickly get overwhelming. Try to guide the viewer to the most important events and status changes.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Swimmer Plots for Longitudinal Data</span>"
    ]
  }
]