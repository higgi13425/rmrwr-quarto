[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Reproducible Medical Research With R",
    "section": "",
    "text": "Preface\nThis is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books\nThis is a static code chunk, which runs the R code in the code chunk below, and lists the output after the code chunk.\n1 + 1\n\n[1] 2\nA Quarto live extension has been installed in this project. In this case, we are using coatless/webr, as it works for books, while rwasm/live does not yet work for books.\nThe documentation for Quarto Live can be read here.\nNote that to make live webr code chunks work with packages beyond base R, each chapter qmd document needs to have a yaml header that looks something like:\n---\nformat: live-html\nwebr:\n  engine: knitr\n  packages:\n    - tidyverse\n    - gt\n    - medicaldata\n---\nIn order to install the particular packages needed for that chapter for the use of the live code chunks.\nNote that this is separate from the setup code chunk, which loads packages for the static code chunks and for inline R code.\nThis will allow you to create live code chunks that you can edit and run, like the one below. Note that when you load a webpage with a live code chunk that loads packages, a black dot will flash at the top right of each code chunk (just to the left of the Run Code button) until all of the packages are loaded. Only then will you be able to run the live webr code chunks.\nAlso note that each live webr code chunk will start with {webr-r} rather than {r} for static code chunks.\nThe below is a live, or dynamic code chunk.\nCheck out the live webr code chunk in the next chapter (which does use packages beyond base R).",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#acknowledgements",
    "href": "index.html#acknowledgements",
    "title": "Reproducible Medical Research With R",
    "section": "Acknowledgements",
    "text": "Acknowledgements\nMany of the following chapters were inspired by blogposts, websites, and e-books that go into far greater depth on topics like modeling, mapping health data, data wrangling, etc. The end of many chapters includes a section on where to explore further. For many of these areas, this book is only an introduction.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#inspirations",
    "href": "index.html#inspirations",
    "title": "Reproducible Medical Research With R",
    "section": "Inspirations",
    "text": "Inspirations\nThe HealthyR book has been an inspiration, and the work of Ewen Harrison and Riinu Pius has been inspirational.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#thanks",
    "href": "index.html#thanks",
    "title": "Reproducible Medical Research With R",
    "section": "Thanks",
    "text": "Thanks",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "This quarto book, with the help of wasm and webr, allows you to edit and run code within live code chunks (a capability called quarto-live).\nNow it is your turn to write some code.\nAdd some style and formatting to the gt table below. Replace the fairly generic opt_stylize function with your own style (though the six options for opt_stylize can get you started quickly). Look at some options either here, or in the {gt} pakage webpage here. Experiment with the fmt_ and the cols_ families of functions. Note that you can change opt_stylize to styles 1-6, and the default colors include “blue”, “cyan”, “pink”, “green”, “red”, or “gray”\n\n\n\n\n\n\nConsider renaming the columns, by adding code that looks a bit like this (pick your own favorite column names):\n\n|&gt; \ncols_label(treatment = \"Rx\",\n          dosing_regimen_for_scurvy = \"Dose\",\n           gum_rot_d6 = \"Gum Rot\",\n           skin_sores_d6 = \"Skin Sores\",\n           weakness_of_the_knees_d6 = \"Weakness\",\n           lassitude_d6 = \"Lassitude\",\n           fit_for_duty_d6 = \"Fit\")",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "wrangle.html",
    "href": "wrangle.html",
    "title": "2  Wrangling data",
    "section": "",
    "text": "Filter the starwars dataset so that only the characters of the Droid species are included. You should get a six row list from C3PO to BB8. You may want to make the table prettier by piping it into gt() to make a gt table.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\nConsider using the filter() function from dplyr. Note that the species ‘Droid’ is capitalized.\n\n\n\n\n\n\n\n\n\n\n\nHint 2\n\n\n\n\n\nYou should filter the dataset using the species column. Remember to use “==” to test equality.\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\nUse the filter() function from dplyr:\n1starwars |&gt;\n2    filter(species == \"Droid\") |&gt;\n3    gt()\n\n1\n\nTake the starwars dataset, and then,\n\n2\n\nFilter for the “Droid” species, and then\n\n3\n\nPipe into gt() for a cleaner, scrollable table",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Wrangling data</span>"
    ]
  },
  {
    "objectID": "inset_table.html",
    "href": "inset_table.html",
    "title": "3  The Power of Patchwork",
    "section": "",
    "text": "We will combine a table and a plot into a single graphic, using the {patchwork} package. Let’s start by loading in some data from {medicaldata}\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(medicaldata)\nlibrary(gt)\n\nWe will now create a summary table in gt that compares radiographic outcomes by arm from 1 = Death to 6 = Considerable improvement. 3 = Moderate deterioration and 4 = No change\nThis HTML table would show up in RStudio in the Viewer tab.\n\nd &lt;- medicaldata::strep_tb \nd |&gt; select(arm, rad_num) |&gt; \n  group_by(arm) |&gt; \n  summarize(rad6m = mean(rad_num),\n            sd = sd(rad_num)) |&gt; \n  gt::gt() -&gt;t1\nt1\n\n\n\n\n\n\n\narm\nrad6m\nsd\n\n\n\n\nControl\n3.134615\n1.726709\n\n\nStreptomycin\n4.672727\n1.732634\n\n\n\n\n\n\n\nNow let’s convert this table into a gtable object composed of 11 grobs (graphical objects), which you can see in the Console. Notice that you now have to plot it to make it show up, amd in RStudio it would show up (by default) centered in the Plots tab.\n\nlibrary(gtable)\ngt1 &lt;- t1 |&gt; as_gtable()\ngt1\n\nTableGrob (3 x 5) \"layout\": 11 grobs\n    z     cells           name\n1   1 (1-1,2-2) column_label_1\n2   2 (1-1,3-3) column_label_2\n3   3 (1-1,4-4) column_label_3\n4   4 (2-2,2-2)    body_cell_1\n5   5 (2-2,3-3)    body_cell_2\n6   6 (2-2,4-4)    body_cell_3\n7   7 (3-3,2-2)    body_cell_4\n8   8 (3-3,3-3)    body_cell_5\n9   9 (3-3,4-4)    body_cell_6\n10 10 (2-3,2-4)     table_body\n11 11 (1-3,2-4)          table\n                                 grob\n1   gt_grid_cell[GRID.gt_grid_cell.3]\n2   gt_grid_cell[GRID.gt_grid_cell.6]\n3   gt_grid_cell[GRID.gt_grid_cell.9]\n4  gt_grid_cell[GRID.gt_grid_cell.13]\n5  gt_grid_cell[GRID.gt_grid_cell.17]\n6  gt_grid_cell[GRID.gt_grid_cell.21]\n7  gt_grid_cell[GRID.gt_grid_cell.25]\n8  gt_grid_cell[GRID.gt_grid_cell.29]\n9  gt_grid_cell[GRID.gt_grid_cell.33]\n10 gt_grid_cell[GRID.gt_grid_cell.36]\n11 gt_grid_cell[GRID.gt_grid_cell.39]\n\nplot(gt1)\n\n\n\n\n\n\n\n\nNow we will make our plot, which will show up in RStudio in the Plots tab. Run the code below to get the plot. We use expand_limits in ggplot to make extra room for the table. The Streptomycin column is 1, and the Control column is 2. We are expanding to add empty columns 3 and 4. Run the code with the blue Run Code button, then Turn off expand_limits with a hashtag to comment it out to see how this works, then Run the code again. Do you know what would happen if we used geom_point? Try it out in the code chunk below. Re-run the code. Click on the Start Over button to restore the code to its original state.\n\n\n\n\n\n\nNow insert the gt1 graphical object table into the plot with the {patchwork} function, inset_element, using the code below at line 25 and beyond. The first 23 lines rebuild the table and plot objects. Run the code. The standard ggplot has the point 0,0 at bottom left, and the point 1,1 at the top right. In the last part of the code chunk below, experiment with the location of the plot by changing the TRBL (pronounced ‘trouble’) parameters, then rerun the code. Also experiment with the alignment - options include ‘full’ and ‘plot’, and run the code, to see if you can figure out what the table is being aligned with for each option.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>The Power of Patchwork</span>"
    ]
  },
  {
    "objectID": "functions.html",
    "href": "functions.html",
    "title": "4  Functions",
    "section": "",
    "text": "4.1 Functions\nR is a functional programming language. This means that functions are first-class objects in R, like dataframes or vectors. Functions can be assigned to variables, passed as arguments to other functions, and returned as values from other functions.\nA common acronym used in R programming is “DRY” for don’t repeat yourself. If you find yourself using the same chunk of code repeatedly (cut, paste, edit), it is probably worth rewriting the code as a function.\nYou can build your own functions in R using the function keyword. Here’s a simple example that adds 2 to an input number:\nTo use this, you can call the function with an argument:\nExperiment a bit with the code block above, and change the argument number to something different, then run it to get the result. It adapts to a new input, and runs the same function.\nYou can even go back to the function block above, and change the what the function does to add three or subtract two. Be sure to run it again to save the new function before you run the function call in the lower block.\nA function has 3 (sort of 4) parts:\nFor the function below, think about:\nname: square  formal argument: x  body: x ^2\nRun the code chunk above to create the square function in the Global Environment.\nNow try to call the square function in a new code block. Fill in an appropriate argument, then run it.\nSome functions generate intermediate results and final results, or may generate more than one piece of output. If this is the case, you may need more control of what is returned by the function. You can do this by combining the components into a vector, a dataframe, or a list, and then return(x) at the end of the body of your function, so that it does not just return the last result. Some people prefer to specify what is returned at the end of the body of each function, just to make it clear. Let’s look at an example.\nRun the function above until the black dot stops blinking. Then you should be able to call the function in the code chunk below.\nExperiment with changing the vector, and then calling the function again. Test that it works properly.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Functions</span>"
    ]
  },
  {
    "objectID": "functions.html#functions",
    "href": "functions.html#functions",
    "title": "4  Functions",
    "section": "",
    "text": "The name of the function (in this case, add_two)\nThe formals(), the list of arguments that control how you call the function. In the case of our simple function below, this is just x.\nThe body(), all of the the code inside the function.\nThe environment(), the data structure that determines how the function finds the values associated with the names. The environment is defined implicitly, rather than explicitly. The function will always look for values of the arguments (the formals) in the function call, or within the function itself. Only if it can not find these defined within the function call or the function, will it them search one level up (in the Global Environment) to see if you have a value for one of the arguments (like x).\n\n\n\nwhat is the name\nwhat is/are the formal arguments?\nwhat is the body?",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Functions</span>"
    ]
  }
]