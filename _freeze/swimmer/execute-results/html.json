{
  "hash": "d0bb46df52b238dbe4cc1f5dfda69f82",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Swimmer Plots for Longitudinal Data\"\n\nformat: live-html\nwebr:\n  packages:\n    - tidyverse\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n\n\n## Longitudinal Data\nHealth care data, especially in administrative databases, are often longitudinal. This means that each patient has their own journey through time with multiple medical encounters, each corresponding to a different time point.<br>\nWe often want to collect data from these encounters and summarize them in a way that is useful for analysis. We often want to track each patient over time, to see the natural history, or a response to a change in therapy.\n\n## The Swimmer Plot\nThe Swimmer Plot is a visualization that shows treatment timelines, with each patient in their own “lane”. It gets the name because it looks a bit like a pool at a swim meet, where you can see the progress of each patient over time. These can help visualize treatment or measurement patterns, clinical events, time-varying covariates, outcomes, and loss to follow-up in longitudinal data settings. These work well with a moderate number of patient courses (usually 10-50), and can be illuminating when new approaches to therapy are being tried in small numbers of patients, like a case series.\n\nNote that this is not done with a particular package, but with standard geom_line and geom_point, but with a lot of customization in ggplot worth learning about.\n\nThis section borrows heavily from a nice blog post from statistician Kat Hoffman here. Note that a bit of data wrangling needs to be done to produce the correct data format for swimmer plots. We will read in some simulated data of COVID patients from spring 2020 from Kat Hoffman. The original data includes one row per day for each patient, with dichotomous outcomes for the events we are interested in: intubation status, use of steroids, the first day of severe hypoxia status, and death.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\noptions(tidyverse.quiet = TRUE)\n\nlibrary(tidyverse)\nlibrary(gt)\nlibrary(rmarkdown)\n\ndat_long <- read_csv(\"https://raw.githubusercontent.com/kathoffman/steroids-trial-emulation/main/data/dat_trt_timeline.csv\", col_types = list(id = \"c\", steroids = \"c\", death = \"c\", severe = \"c\"))\ndat_long |> head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 6\n  id      day intubation_status steroids death severe\n  <chr> <dbl> <chr>             <chr>    <chr> <chr> \n1 797       0 Not intubated     0        0     0     \n2 797       1 Not intubated     0        0     0     \n3 797       2 Not intubated     0        0     1     \n4 797       3 Not intubated     0        0     0     \n5 797       4 Not intubated     0        0     0     \n6 797       5 Not intubated     0        0     0     \n```\n\n\n:::\n:::\n\n\n\n\n\nWe can use geom_line to plot the length of stay, with day on thex axis and lines colored by intubation status and grouped by patient id.\n\n\n\n\n\n::: {.cell messages='false' warnings='false'}\n```{webr}\n#| messages: false\n#| warnings: false\n\ndat_long <- read_csv(\"https://raw.githubusercontent.com/kathoffman/steroids-trial-emulation/main/data/dat_trt_timeline.csv\", col_types = list(id = \"c\", steroids = \"c\", death = \"c\", severe = \"c\"))\n\ndat_long |>\n  ggplot(aes(x=day, y=id, col = intubation_status, group=id)) +\n  geom_line() +\n  theme_bw()\n```\n:::\n\n\n\n\n\nWhile this is very simple, it gives you a quick look at how these 30 simulated patients did in the hospital.\n\nWe can add steroid use by day as colored points with `geom_point()`, by adding one line of code after `geom_line()`.\nGive this a try in the code chunk above.\n\n## Wrangling\n\nThis gets a bit messy, as we have different colors of points (steroids on/steroids off) obscuring the colors of the lines indicating intubation. It is time for a bit of data wrangling.\n\nTo help clarify things in data wrangling step 1, let’s create new variables to specify on which day(s) steroids were used, the first day that severe hypoxia was present, and when death occurred. These variables will have lots of NA values when things did not occur - so that we won’t plot points when the events did not occur (NA days), and will have days for the values when the events occurred, which makes these easier to plot on the x axis. These NAs will be removed (and generate a lot of warnings) when plotting, so we will use an option to turn off messages and warnings in this section.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::opts_chunk$set(message = F, warning = F)\n\ndat_long <- read_csv(\"https://raw.githubusercontent.com/kathoffman/steroids-trial-emulation/main/data/dat_trt_timeline.csv\", col_types = list(id = \"c\", steroids = \"c\", death = \"c\", severe = \"c\"))\n\ndat_swim <-\n  dat_long |>\n  mutate(\n    severe_this_day = case_when(severe == 1 ~ day),\n    steroids_this_day = case_when(steroids == 1 ~ day),\n    death_this_day = case_when(death == 1 ~ day)\n  )\n```\n:::\n\n\n\n\n\nIn data wrangling step 2 below, it would also make it easier to read the plot if the patients were arranged by length of stay (max_day), so we will use fct_reorder() to make the patient ids (factors) ordered by length of stay.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_swim <-\n  dat_swim |>\n  group_by(id) |>\n  mutate(max_day = max(day)) |>\n  ungroup() |>\n  mutate(id = fct_reorder(factor(id), max_day))\n\nhead(dat_swim) |> paged_table()\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"id\"],\"name\":[1],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"day\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"intubation_status\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"steroids\"],\"name\":[4],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"death\"],\"name\":[5],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"severe\"],\"name\":[6],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"severe_this_day\"],\"name\":[7],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"steroids_this_day\"],\"name\":[8],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"death_this_day\"],\"name\":[9],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"max_day\"],\"name\":[10],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"797\",\"2\":\"0\",\"3\":\"Not intubated\",\"4\":\"0\",\"5\":\"0\",\"6\":\"0\",\"7\":\"NA\",\"8\":\"NA\",\"9\":\"NA\",\"10\":\"16\"},{\"1\":\"797\",\"2\":\"1\",\"3\":\"Not intubated\",\"4\":\"0\",\"5\":\"0\",\"6\":\"0\",\"7\":\"NA\",\"8\":\"NA\",\"9\":\"NA\",\"10\":\"16\"},{\"1\":\"797\",\"2\":\"2\",\"3\":\"Not intubated\",\"4\":\"0\",\"5\":\"0\",\"6\":\"1\",\"7\":\"2\",\"8\":\"NA\",\"9\":\"NA\",\"10\":\"16\"},{\"1\":\"797\",\"2\":\"3\",\"3\":\"Not intubated\",\"4\":\"0\",\"5\":\"0\",\"6\":\"0\",\"7\":\"NA\",\"8\":\"NA\",\"9\":\"NA\",\"10\":\"16\"},{\"1\":\"797\",\"2\":\"4\",\"3\":\"Not intubated\",\"4\":\"0\",\"5\":\"0\",\"6\":\"0\",\"7\":\"NA\",\"8\":\"NA\",\"9\":\"NA\",\"10\":\"16\"},{\"1\":\"797\",\"2\":\"5\",\"3\":\"Not intubated\",\"4\":\"0\",\"5\":\"0\",\"6\":\"0\",\"7\":\"NA\",\"8\":\"NA\",\"9\":\"NA\",\"10\":\"16\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n\nAfter this data wrangling, now we can plot the data again, arranged by LOS and with only the steroid used days as visible points.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_swim |>\n  ggplot() +\n  geom_line(aes(x = day, y = id, col = intubation_status, group = id)) +\n  geom_point(aes(\n    x = steroids_this_day, y = id,\n    col = \"Steroids\", shape = \"Steroids\"\n  )) +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](swimmer_files/figure-html/plot-1.png){width=672}\n:::\n:::\n\n\n\n\n\nThis is nicer to look at, though the legend is still a bit of a mess, and you can now clearly see that steroids were largely used for intubated patients at this point. It would look nicer if the lines were nearly as thick as the points, so that they are less obscured.\n\nLet’s fix this with a larger geom_line size (start around 2 and fine-tune), and format the steroid points with a shape for contrast (you can find shapes 0-25 here https://www.sthda.com/english/wiki/ggplot2-point-shapes).\nShapes 15-25 can have a separate color and fill, while shapes 0-14 can only have a color.\nTry this out in the chunk below - fix the two blanks (at the bottom right - you may need to scroll to the right) in the code below **before** you run the code.\n\n\n\n\n\n\n::: {.cell}\n```{webr}\n#| warning: false\n\ndat_long <- read_csv(\"https://raw.githubusercontent.com/kathoffman/steroids-trial-emulation/main/data/dat_trt_timeline.csv\", col_types = list(id = \"c\", steroids = \"c\", death = \"c\", severe = \"c\"))\n\ndat_swim <- dat_long |>\n  mutate(\n    severe_this_day = case_when(severe == 1 ~ day),\n    steroids_this_day = case_when(steroids == 1 ~ day),\n    death_this_day = case_when(death == 1 ~ day)) |> \n  group_by(id) |>\n  mutate(max_day = max(day)) |>\n  ungroup() |>\n  mutate(id = fct_reorder(factor(id), max_day))\n    \ndat_swim |> \n  ggplot() +\n  geom_line(aes(x=day, y=id, col = intubation_status, group=id), linewidth = ___) +\n  geom_point(aes(x=steroids_this_day, y=id, col=\"Steroids\"), stroke=2, shape = ___) +\n  theme_bw()\n```\n:::\n\n\n\n\n\nNow we can add important clinical events - we can add severe hypoxia events and death events to the plot, with additional point geoms with distinct shapes for each of these.\n\n\n\n\n\n::: {.cell}\n```{webr}\n#| warning: false\ndat_long <- read_csv(\"https://raw.githubusercontent.com/kathoffman/steroids-trial-emulation/main/data/dat_trt_timeline.csv\", col_types = list(id = \"c\", steroids = \"c\", death = \"c\", severe = \"c\"))\n\ndat_swim <- dat_long |>\n  mutate(\n    severe_this_day = case_when(severe == 1 ~ day),\n    steroids_this_day = case_when(steroids == 1 ~ day),\n    death_this_day = case_when(death == 1 ~ day)) |> \n  group_by(id) |>\n  mutate(max_day = max(day)) |>\n  ungroup() |>\n  mutate(id = fct_reorder(factor(id), max_day))\n\ndat_swim |>\n  ggplot() +\n  geom_line(aes(x = day, y = id, col = intubation_status, group = id),\n    size = 1.8\n  ) +\n  geom_point(aes(x = steroids_this_day, y = id, col = \"Steroids\"), stroke = 2, shape = 15) +\n  theme_bw() +\n  geom_point(aes(x = severe_this_day, y = id, col = \"Severe hypoxia\"), linewidth = 2, stroke = 1.5, shape = 21) +\n  geom_point(aes(x = death_this_day, y = id, col = \"Death\"), size = 2, stroke = 1.5, shape = 4)\n```\n:::\n\n\n\n\n\nNow three challenges for you -\n\n1. Fine tune the colors in the code chunk above - at the beginning of the code chunk, create a vector of colors named `colors`, and include in the vector a red color for \"Severe hypoxia\", a navy color for \"Intubated\", a light blue for \"Not Intubated\", a yellow-gold color for \"Steroids\", and black for \"Death\". Then in your geom_line and geom_point assign `col`= to each of these (\"Intubated\", \"Death\" where appropriate)\n\n2. Change the legend name to \"Patient Status\", and add `scale_color_manual = \"Patient Status\"`\n\n3. Assign the plot to the letter `p`, so that we can add to it further. Also display p at the end of the code chunk.\n\nTry to modify the code chunk above to achieve this.\n\nIf you want to peek at a solution, see the code below\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\n# define colors for all geometries with a color argument\ncols <- c(\n  \"Severe hypoxia\" = \"#b24745\", # red\n  \"Intubated\" = \"#483d8b\", # navy\n  \"Not intubated\" = \"#74aaff\", # light blue\n  \"Steroids\" = \"#ffd966\", # gold\n  \"Death\" = \"#000000\"\n) # black\n\np <- dat_swim |>\n  ggplot() +\n  geom_line(aes(x = day, y = id, col = intubation_status, group = id),\n    size = 1.8\n  ) +\n  geom_point(aes(x = steroids_this_day, y = id, col = \"Steroids\"), stroke = 2, shape = 15) +\n  theme_bw() +\n  geom_point(aes(x = severe_this_day, y = id, col = \"Severe hypoxia\"), size = 2, stroke = 1.5, shape = 21) +\n  geom_point(aes(x = death_this_day, y = id, col = \"Death\"), size = 2, stroke = 1.5, shape = 4) +\n  scale_color_manual(values = cols, name = \"Patient Status\")\np\n```\n\n::: {.cell-output-display}\n![](swimmer_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n\n\nThis is developing nicely. But the legend symbols are accurate for colors, but don’t reflect the shapes we used, as we did not use aes() to create the shapes. To override the default shapes, lines, etc. in the legend, we need to use the guides() function, and override guide_legend(). This lets you manually specify the shapes. Let’s start by first defining the corresponding shapes (with NA when we don’t want a point), then overriding the shapes, and update our plot.\n\n## Aesthetic Tune-Ups\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshape_override <- c(4, NA, NA, 21, 15) # order matches `cols`:severe, intubation (yes/no), steroids, death, with the appropriate shapes\n\n# modify the color legend to include the correct shapes\np +\n  guides(color = guide_legend(\n    override.aes = list(\n      shape = shape_override\n    )\n  ))\n```\n\n::: {.cell-output-display}\n![](swimmer_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n\n\nThat worked well. Now let’s remove the lines though Death, Severe Hypoxia, and Steroids, by overriding the line type (1 for a standard line or NA for no line), then fine tune the stroke and size for each of these geom points. Note that for shapes 21-24 in R, you have to separately specify stroke (for outer line) and fill (if any), while shapes 1-20 just require a size.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nline_override <- c(NA, 1, 1, NA, NA) # order matches `cols`:severe, intubation (yes/no), steroids, death\nstroke_override <- c(1.2, 1, 1, 1, 1.4) # order matches `cols`:severe, intubation (yes/no), steroids, death\nsize_override <- c(2.5, 2.5, 2.6, 2.5, 2) # order matches `cols`:severe, intubation (yes/no), steroids, death\n\np <-\n  p +\n  guides(color = guide_legend(\n    override.aes = list(\n      shape = shape_override,\n      linetype = line_override,\n      stroke = stroke_override,\n      size = size_override\n    )\n  ))\np\n```\n\n::: {.cell-output-display}\n![](swimmer_files/figure-html/overrides-1.png){width=672}\n:::\n:::\n\n\n\n\n\nNow the legend looks nice. Let’s add a few more aesthetic tweaks, including title and better axis labels, and repositioning the legend.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- p +\n  labs(x = \"Days since hospitalization\", y = \"Patient\\nnumber\", title = \"COVID Treatment Timeline for 30 Patients\") +\n  scale_x_continuous(expand = c(0, 0)) + # remove extra white space\n  theme( # text=element_text(family=\"Poppins\", size=11),\n    title = element_text(angle = 0, vjust = .5, size = 12, face = \"bold\"),\n    axis.title.y = element_text(angle = 0, vjust = .5, size = 12, face = \"bold\"),\n    axis.title.x = element_text(size = 15, face = \"bold\", vjust = -0.5, hjust = 0),\n    axis.text.y = element_text(size = 6, hjust = 1.5),\n    axis.ticks.y = element_blank(),\n    legend.position = c(0.8, 0.3),\n    legend.title = element_text(colour = \"black\", size = 13, face = 4),\n    legend.text = element_text(colour = \"black\", size = 10),\n    legend.background = element_rect(size = 0.5, linetype = \"solid\", colour = \"gray30\"),\n    panel.grid.minor = element_blank(),\n    panel.grid.major.x = element_blank()\n  )\np\n```\n\n::: {.cell-output-display}\n![](swimmer_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n\n\nAnd we are done. Think about how you can illustrate the clinical course for a number of patients, and transmit a lot of longitudinal information quickly when the number of patients is not too great.\n\nTry this out with a small data set of your own. Select a few levels of `status` for line color, and a few `events` that are clinically significant. Spend some time planning this out and creating/wrangling the data set. It can be helpful to start with a rough mockup drawing on paper while you are planning to help you think out the statuses, events, shapes, and colors. It is important not to put in too much, or it can quickly get overwhelming. Try to guide the viewer to the most important events and status changes.\n",
    "supporting": [
      "swimmer_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}